buildscript {
    def local = new Properties()
    def localFile = file("./local.properties")
    if (localFile.exists()) {
        localFile.withInputStream {
            local.load(it)
        }
    }

    def env = { String name ->
        return local[name] ?: System.getProperty(name) ?: System.getenv(name)
    }

    ext.kotlin_version = '1.6.10'
    ext.kotlin_coroutines_version = '1.6.0'
    ext.spring_boot_version = '2.6.3'
    ext.flywaydb_version = "8.4.3"
    ext.apache_poi_version = '5.2.0'
    ext.postgresql_version = '42.3.2'
    ext.handlebars_version = '4.3.0'

    ext.databaseLibrary = 'org.postgresql:postgresql'
    ext.databaseDriver = 'org.postgresql.Driver'
    ext.databaseJooqDialect = 'org.jooq.meta.postgres.PostgresDatabase'
    ext.databaseHost = env("JDBC_HOST") ?: "localhost"
    ext.databasePort = env("JDBC_PORT") ?: 5432
    ext.databaseUsername = env("JDBC_USERNAME") ?: "mdss"
    ext.databasePassword = env("JDBC_PASSWORD") ?: "ph4rmc4dd"
    ext.databaseBaseUrl = "jdbc:postgresql://$databaseHost:$databasePort/pharmcadd-form"

    println('databaseBaseUrl :' + databaseBaseUrl)

    repositories {
        mavenCentral()
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jmailen.gradle:kotlinter-gradle:3.6.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlin_version}"
        classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlin_version}"
        classpath "gradle.plugin.org.flywaydb:gradle-plugin-publishing:${flywaydb_version}"
        classpath "nu.studer:gradle-jooq-plugin:6.0.1"
    }
}

group 'pharmcadd'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

apply plugin: 'idea'

apply plugin: 'java'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

apply plugin: 'kotlin'
compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
        freeCompilerArgs += ['-Xopt-in=kotlin.time.ExperimentalTime']
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
        freeCompilerArgs += ['-Xopt-in=kotlin.time.ExperimentalTime']
    }
}

apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

apply plugin: "kotlin-spring"
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

apply plugin: "org.jmailen.kotlinter"
kotlinter {
    disabledRules = ["no-wildcard-imports", "filename", "import-ordering"]
}

apply plugin: 'nu.studer.jooq'
jooq {
    version = '3.15.4'  // default (can be omitted)
    edition = nu.studer.gradle.jooq.JooqEdition.OSS  // default (can be omitted)

    configurations {
        main {
            generateSchemaSourceOnCompilation = false

            generationTool {
                logging = org.jooq.meta.jaxb.Logging.INFO
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = "${databaseBaseUrl}"
                    user = "${databaseUsername}"
                    password = "${databasePassword}"
                }
                generator {
//                    name = 'org.jooq.codegen.KotlinGenerator'
                    name = 'org.jooq.codegen.DefaultGenerator'
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        includeSystemSequences = true
//                        forcedTypes {
//                            forcedType {
//                                userType = 'pharmcadd.form.jooq.enums.PlaceOfWork'
//                                enumConverter = true
//                                includeExpression = '.*\\.member\\.place_of_work'
//                                includeTypes = '.*'
//                            }
//                        }
                    }
                    generate {
                        deprecated = false
                        records = true
//                        immutablePojos = true
                        fluentSetters = true
                        relations = true
                        pojos = true
                        generatedAnnotation = true
                        nullableAnnotation = true
                        nullableAnnotationType = 'org.jetbrains.annotations.Nullable'
                        nonnullAnnotation = true
                        nonnullAnnotationType = 'org.jetbrains.annotations.NotNull'
                    }
                    target {
                        packageName = 'pharmcadd.form.jooq'
                    }
                }
            }
        }
    }
}

apply plugin: "org.flywaydb.flyway"
flyway {
    url = "${databaseBaseUrl}"
    user = "${databaseUsername}"
    password = "${databasePassword}"
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:${kotlin_coroutines_version}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${kotlin_coroutines_version}"

    implementation group: 'org.jetbrains', name: 'annotations', version: '23.0.0'

    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.hibernate.validator:hibernate-validator"

    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation "io.github.microutils:kotlin-logging:2.1.21"
    implementation "io.arrow-kt:arrow-core:1.0.1"

    implementation "org.postgresql:postgresql:${postgresql_version}"
    jooqGenerator "org.postgresql:postgresql:${postgresql_version}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation "com.github.jknack:handlebars:${handlebars_version}"
    implementation "com.github.jknack:handlebars-helpers:${handlebars_version}"

    implementation group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'

    // oauth server
    implementation 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.3.4.RELEASE'
    implementation 'com.nimbusds:nimbus-jose-jwt:9.15.2'

    // oauth client
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    implementation 'org.apache.poi:poi-ooxml:4.1.2'
}

test {
    useJUnitPlatform()
}